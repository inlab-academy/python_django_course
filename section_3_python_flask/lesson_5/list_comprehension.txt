////////////////////////////////////
// List Comprehension

What does it do?


List Comprehension vs Looping

numbers = [1, 2, 3, 4, 5]
doubled_numbers = []

for num in numbers:
    doubled_number = num * 2
    doubled_numbers.append(doubled_number)

print(doubled_numbers) # [2, 4, 6, 8, 10]


numbers = [1, 2, 3, 4, 5]

doubled_numbers = [num * 2 for num in numbers]

print(doubled_numbers) # [2, 4, 6, 8, 10]







List Comprehension Examples

name = 'colt'

[char.upper() for char in name] # ['C', 'O', 'L', 'T']


friends = ['ashley', 'matt', 'michael']

[friend[0].upper() for friend in friends] # ['Ashley', 'Matt', 'Michael']



More Examples


[num*10 for num in range(1,6)] # [10, 20, 30, 40, 50]

[bool(val) for val in [0, [], '']] # [False, False, False]


numbers = [1, 2, 3, 4, 5]

string_list = [str(num) for num in numbers]

print(string_list) # ['1', '2', '3', '4', '5']



LC with Conditional Logic


numbers = [1, 2, 3, 4, 5, 6]

evens = [num for num in numbers if num % 2 == 0]

odds = [num for num in numbers if num % 2 != 0]


[num*2 if num % 2 == 0 else num/2 for num in numbers] 

# [0.5, 4, 1.5, 8, 2.5, 12]


with_vowels = "This is so much fun!"

''.join(char for char in with_vowels if char not in "aeiou")

# "Ths s s mch fn!"





Nested Lists

Lists can contain any kind of element, even other lists!

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]


Why?

Complex data structures - matricies

Game Boards / Mazes

Rows and Columns for visualizations, tabulation and grouping data





Accessing Nested Lists

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

nested_list[0][1] # 2

nested_list[1][-1] # 6





Printing Values in Nested Lists


nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

for l in nested_list:
    for val in l:
        print(val)


# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9



Nested List Comprehension

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

[[print(val) for val in l] for l in nested_list]

# 1
# 2
# 3
# 4
# 5
# 6
# 7
# 8
# 9



Another Example


board = [[num for num in range(1,4)] for val in range(1,4)]

print(board) # [[1, 2, 3], [1, 2, 3], [1, 2, 3]]

[["X" if num % 2 != 0 else "O" for num in range(1,4)] for val in range(1,4)]

# [['X', 'O', 'X'], ['X', 'O', 'X'], ['X', 'O', 'X']]




Swapping Values

names = ["James", "Michelle"]

names[0], names[1] = names[1], names[0]

print(names) # ['Michelle', 'James']



When Do You Need to Swap?

shuffling

sorting

algorithms




///////    Recap       /////////

lists are fundamental data structures for ordered information
lists can be include any type, even other lists!
we can modify lists using a variety of methods
slices are quite useful when making copies of lists
list comprehension is used everywhere when iterating over lists, strings, ranges and even more data types!
nested lists are essential for building more complex data structures like matrices, game boards and mazes
swapping is quite useful when shuffling or sorting