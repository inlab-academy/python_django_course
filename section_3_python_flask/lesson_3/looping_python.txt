//////////////////////////////////////////////
// LOOPS

OBJECTIVES

Understand what loops are and how they are useful
Learn what an "iterable object" is
Use for and while loops to iterate over ranges and strings 
Learn how to control exiting a loop


Print numbers 1 through 7

print(1)
1
print(2)
2
print(3)
3
print(4)
4
print(5)
5
print(6)
6
print(7)
7

That's way too much work!
We can simplify this with a for loop over a range.



for loops

In Python, for loops are written like this:

for item in iterable_object:
    # do something with item


An iterable object is some kind of collection of items, 
for instance: a list of numbers, a string of characters, a range, etc.

item is a new variable that can be called whatever you want

item references the current position of our iterator within the
terable. It will iterate over (run through) every item of the
collection and then go away when it has visited all items



// ranges

If we just want to print numbers, we can simply iterate over a range.

A range is just a slice of the number line
0  1  2  3  4  5  6  7 

Python ranges come in multiple forms:

range(7) gives you integers from 0 thru 6 ( shown)                    Count starts at 0 and is exclusive
range(1, 8) will give you integers from 1 to 7                        Two parameters are (start, end)


range(1, 10, 2)  will give you odds from 1 to 10             
range(7, 0, -1)  will give you integers from 7 to                     Third param is called the "step",
                                                                      meaning how many to skip. Also,
                                                                      which way to count, up + or down


// while loops

We can also iterate using a while loop, which has a different format:

while im_tired:
    # seek caffeine


while loops continue to execute while a certain condition is truthy,
and will end when they become falsy

user_response = None
while user_response != "please":
    user_response = input("Ah ah ah, you didn't say the magic word: ")


while loops require more careful setup than for loops, since you have
to specify the termination conditions manually.

Be careful! If the condition doesn't become false at
some point, your loop will continue forever!


// Controlled Exit

The keyword break gives us the ability to exit out of while loops whenever we want

while True:
    command = input("Type 'exit' to exit: ")
    if (command == "exit"):
        break

We can also use it to end for loops early:

for x in range(1, 101):
    print(x)
    if x == 3:
        break


ADDING A BREAK

times = int(input("How many times do I have to tell you? "))

for time in range(times):
	print("CLEAN UP YOUR ROOM!")
	if time >= 4: 
		print("do you even listen anymore?")
		break

How many times do I have to tell you? 100
CLEAN UP YOUR ROOM!
CLEAN UP YOUR ROOM!
CLEAN UP YOUR ROOM!
CLEAN UP YOUR ROOM!
CLEAN UP YOUR ROOM!
do you even listen anymore?